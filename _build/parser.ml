type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | ASSIGN
  | MULT
  | DIV
  | MOD
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | FOR
  | IN
  | WHILE
  | BREAK
  | CONTINUE
  | RETURN
  | INT
  | BOOL
  | FLOAT
  | STRING
  | VOID
  | CHAR
  | RECORD
  | INTLIT of (int)
  | CHARLIT of (char)
  | STRLIT of (string)
  | BOOLLIT of (bool)
  | TRUE
  | FALSE
  | FLOATLIT of (float)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACK *);
  261 (* RBRACK *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* COMMA *);
  265 (* DOT *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* ASSIGN *);
  269 (* MULT *);
  270 (* DIV *);
  271 (* MOD *);
  272 (* EQ *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* GT *);
  276 (* LEQ *);
  277 (* GEQ *);
  278 (* AND *);
  279 (* OR *);
  280 (* NOT *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* IN *);
  285 (* WHILE *);
  286 (* BREAK *);
  287 (* CONTINUE *);
  288 (* RETURN *);
  289 (* INT *);
  290 (* BOOL *);
  291 (* FLOAT *);
  292 (* STRING *);
  293 (* VOID *);
  294 (* CHAR *);
  295 (* RECORD *);
  300 (* TRUE *);
  301 (* FALSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  296 (* INTLIT *);
  297 (* CHARLIT *);
  298 (* STRLIT *);
  299 (* BOOLLIT *);
  302 (* FLOATLIT *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\008\000\008\000\
\005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\012\000\012\000\013\000\
\013\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\011\000\011\000\015\000\015\000\009\000\009\000\
\016\000\016\000\007\000\007\000\014\000\014\000\017\000\017\000\
\018\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\002\000\004\000\000\000\002\000\
\008\000\002\000\002\000\003\000\007\000\005\000\007\000\005\000\
\006\000\002\000\003\000\002\000\002\000\000\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\003\000\004\000\003\000\004\000\005\000\006\000\004\000\
\006\000\007\000\002\000\004\000\002\000\004\000\000\000\001\000\
\001\000\003\000\000\000\001\000\000\000\001\000\001\000\003\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\007\000\008\000\010\000\
\012\000\009\000\000\000\035\000\037\000\038\000\034\000\039\000\
\040\000\036\000\000\000\082\000\000\000\000\000\004\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\028\000\026\000\000\000\000\000\000\000\000\000\
\000\000\001\000\003\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\057\000\013\000\
\011\000\000\000\058\000\016\000\000\000\020\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\000\000\061\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\069\000\000\000\000\000\080\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\000\000\000\000\000\000\065\000\021\000\023\000\070\000\000\000\
\066\000\017\000"

let yydgoto = "\002\000\
\028\000\029\000\030\000\043\000\032\000\044\000\100\000\045\000\
\124\000\034\000\035\000\041\000\042\000\093\000\125\000\101\000\
\094\000\095\000"

let yysindex = "\013\000\
\139\255\000\000\187\255\163\255\139\255\187\255\045\255\063\255\
\064\255\066\255\068\255\112\255\000\000\000\000\000\000\000\000\
\000\000\000\000\036\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\255\000\000\085\000\139\255\000\000\000\000\
\001\255\186\000\090\255\187\255\125\001\050\255\051\255\208\001\
\099\255\000\000\139\255\003\255\100\255\007\002\187\255\062\255\
\187\255\000\000\000\000\000\000\209\000\109\255\187\255\187\255\
\187\255\000\000\000\000\184\255\032\255\000\000\187\255\073\255\
\187\255\187\255\187\255\187\255\187\255\187\255\187\255\187\255\
\187\255\187\255\187\255\187\255\187\255\000\000\000\000\000\000\
\000\000\187\255\000\000\000\000\110\255\000\000\146\001\096\255\
\167\001\000\000\184\255\248\001\125\255\000\000\123\255\127\255\
\248\001\184\255\133\255\134\255\130\255\184\255\187\255\228\001\
\033\255\137\255\137\255\021\255\021\255\000\001\035\002\035\002\
\048\002\072\002\048\002\072\002\022\002\002\000\000\000\139\255\
\187\255\139\255\008\255\135\255\152\255\000\000\187\255\000\000\
\000\000\184\255\144\255\248\001\037\255\187\255\187\255\136\255\
\188\001\000\000\000\000\160\255\184\255\000\000\133\255\186\255\
\187\255\187\255\190\255\248\001\139\255\139\255\000\000\010\255\
\139\255\191\255\248\001\000\000\000\000\000\000\000\000\183\255\
\000\000\000\000"

let yyrindex = "\000\000\
\195\000\000\000\000\000\207\255\208\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\234\255\000\000\000\000\195\000\000\000\000\000\
\000\000\000\000\000\000\207\255\000\000\000\000\000\000\209\255\
\000\000\000\000\208\255\000\000\000\000\085\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\255\210\255\217\255\
\000\000\000\000\000\000\213\255\224\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\224\255\000\000\000\000\000\000\
\000\000\000\000\219\255\103\255\000\000\000\000\012\255\000\000\
\122\255\000\000\043\255\000\000\233\255\237\255\000\000\000\000\
\048\000\094\000\117\000\140\000\163\000\232\000\068\001\091\001\
\020\255\255\000\045\001\022\001\095\255\114\001\000\000\000\000\
\000\000\000\000\000\000\000\000\015\255\000\000\000\000\000\000\
\000\000\000\000\000\000\245\255\071\000\210\255\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\255\000\000\
\210\255\000\000\000\000\063\002\000\000\000\000\000\000\000\000\
\208\255\000\000\071\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\228\000\000\000\255\255\000\000\003\000\000\000\215\255\
\158\000\005\000\000\000\000\000\180\000\206\255\000\000\000\000\
\138\000\000\000"

let yytablesize = 855
let yytable = "\031\000\
\022\000\084\000\060\000\033\000\060\000\096\000\039\000\037\000\
\040\000\060\000\046\000\060\000\013\000\001\000\079\000\055\000\
\053\000\072\000\079\000\056\000\049\000\072\000\049\000\049\000\
\049\000\057\000\049\000\049\000\031\000\064\000\065\000\066\000\
\033\000\102\000\134\000\049\000\049\000\049\000\145\000\049\000\
\040\000\049\000\049\000\103\000\135\000\073\000\047\000\061\000\
\146\000\085\000\073\000\087\000\060\000\089\000\139\000\081\000\
\159\000\013\000\074\000\092\000\092\000\097\000\099\000\074\000\
\048\000\049\000\050\000\104\000\051\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\054\000\147\000\058\000\055\000\040\000\055\000\
\055\000\055\000\078\000\055\000\055\000\123\000\154\000\053\000\
\080\000\053\000\053\000\053\000\039\000\053\000\053\000\083\000\
\123\000\081\000\086\000\132\000\088\000\081\000\081\000\160\000\
\052\000\003\000\091\000\036\000\053\000\053\000\136\000\105\000\
\138\000\103\000\056\000\121\000\056\000\137\000\056\000\126\000\
\056\000\056\000\127\000\092\000\143\000\128\000\060\000\006\000\
\129\000\130\000\092\000\148\000\003\000\140\000\004\000\152\000\
\005\000\064\000\144\000\157\000\158\000\092\000\155\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\141\000\
\151\000\149\000\006\000\007\000\003\000\008\000\004\000\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\006\000\098\000\003\000\162\000\036\000\153\000\
\156\000\161\000\002\000\013\000\014\000\015\000\016\000\017\000\
\018\000\038\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\006\000\030\000\077\000\032\000\015\000\075\000\
\013\000\014\000\015\000\016\000\017\000\018\000\038\000\077\000\
\067\000\071\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\041\000\076\000\041\000\041\000\041\000\071\000\
\041\000\041\000\041\000\041\000\041\000\068\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\059\000\022\000\131\000\022\000\119\000\022\000\022\000\
\142\000\000\000\064\000\065\000\066\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\022\000\022\000\000\000\022\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\060\000\000\000\060\000\060\000\060\000\000\000\060\000\060\000\
\060\000\060\000\060\000\000\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\059\000\
\000\000\059\000\059\000\059\000\000\000\059\000\059\000\059\000\
\059\000\059\000\000\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\042\000\000\000\
\042\000\042\000\042\000\000\000\042\000\042\000\000\000\042\000\
\042\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\043\000\000\000\043\000\
\043\000\043\000\000\000\043\000\043\000\000\000\043\000\043\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\045\000\000\000\045\000\045\000\
\045\000\000\000\045\000\045\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\044\000\000\000\044\000\044\000\044\000\
\000\000\044\000\044\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\062\000\000\000\000\000\063\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\090\000\000\000\000\000\063\000\000\000\000\000\000\000\
\000\000\064\000\065\000\066\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\046\000\000\000\046\000\046\000\046\000\000\000\046\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\051\000\
\000\000\051\000\051\000\051\000\000\000\051\000\051\000\000\000\
\064\000\065\000\066\000\000\000\067\000\068\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\052\000\000\000\
\052\000\052\000\052\000\000\000\052\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\050\000\000\000\050\000\
\050\000\050\000\000\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\050\000\000\000\
\050\000\000\000\050\000\050\000\047\000\000\000\047\000\047\000\
\047\000\000\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\047\000\000\000\000\000\000\000\
\000\000\047\000\047\000\048\000\000\000\048\000\048\000\048\000\
\000\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\048\000\000\000\000\000\000\000\000\000\
\048\000\048\000\054\000\000\000\054\000\054\000\054\000\000\000\
\054\000\054\000\000\000\000\000\000\000\000\000\000\000\079\000\
\063\000\000\000\000\000\000\000\000\000\064\000\065\000\066\000\
\054\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\120\000\063\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\122\000\063\000\000\000\000\000\000\000\000\000\064\000\
\065\000\066\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\150\000\063\000\
\000\000\000\000\000\000\000\000\064\000\065\000\066\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\063\000\000\000\000\000\000\000\082\000\
\064\000\065\000\066\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\063\000\
\133\000\000\000\000\000\000\000\064\000\065\000\066\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\063\000\000\000\000\000\000\000\000\000\
\064\000\065\000\066\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\064\000\
\065\000\066\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\064\000\065\000\
\066\000\000\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\064\000\065\000\066\000\000\000\067\000\
\068\000\069\000\000\000\000\000\072\000\073\000\074\000\075\000\
\064\000\065\000\066\000\000\000\067\000\068\000\069\000\062\000\
\000\000\062\000\073\000\062\000\075\000\062\000\062\000\063\000\
\000\000\063\000\000\000\063\000\000\000\063\000\063\000\000\000\
\064\000\065\000\066\000\000\000\067\000\068\000\069\000"

let yycheck = "\001\000\
\000\000\043\000\002\001\001\000\002\001\056\000\004\000\003\000\
\004\000\002\001\006\000\002\001\002\001\001\000\003\001\002\001\
\012\000\003\001\007\001\006\001\001\001\007\001\003\001\004\001\
\005\001\012\001\007\001\008\001\030\000\009\001\010\001\011\001\
\030\000\002\001\002\001\016\001\017\001\018\001\002\001\020\001\
\036\000\022\001\023\001\012\001\012\001\003\001\002\001\047\001\
\012\001\047\001\008\001\047\000\002\001\049\000\047\001\005\001\
\047\001\047\001\003\001\055\000\056\000\057\000\060\000\008\001\
\002\001\002\001\001\001\063\000\001\001\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\047\001\134\000\000\000\001\001\082\000\003\001\
\004\001\005\001\001\001\007\001\008\001\091\000\145\000\001\001\
\047\001\003\001\004\001\005\001\098\000\007\001\008\001\005\001\
\102\000\003\001\007\001\103\000\047\001\007\001\008\001\153\000\
\001\001\002\001\006\001\004\001\022\001\023\001\120\000\047\001\
\122\000\012\001\001\001\028\001\003\001\121\000\005\001\003\001\
\007\001\008\001\008\001\127\000\130\000\007\001\002\001\024\001\
\003\001\008\001\134\000\135\000\002\001\007\001\004\001\141\000\
\006\001\009\001\003\001\149\000\150\000\145\000\146\000\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\008\001\
\001\001\026\001\024\001\025\001\002\001\027\001\004\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\024\001\004\001\002\001\007\001\004\001\006\001\
\003\001\003\001\000\000\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\024\001\005\001\003\001\005\001\007\001\003\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\007\001\
\001\001\007\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\001\001\003\001\003\001\004\001\005\001\003\001\
\007\001\008\001\009\001\010\001\011\001\001\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\030\000\002\001\102\000\004\001\082\000\006\001\007\001\
\127\000\255\255\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\024\001\025\001\255\255\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\001\001\255\255\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\001\001\
\255\255\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\001\001\255\255\
\003\001\004\001\005\001\255\255\007\001\008\001\255\255\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\255\255\003\001\
\004\001\005\001\255\255\007\001\008\001\255\255\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\001\001\255\255\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\001\001\255\255\003\001\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\001\001\255\255\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\001\001\255\255\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\001\001\255\255\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\001\001\
\255\255\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\009\001\010\001\011\001\255\255\013\001\014\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\001\001\255\255\
\003\001\004\001\005\001\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\255\255\003\001\
\004\001\005\001\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\001\001\255\255\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\001\001\255\255\003\001\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\022\001\023\001\001\001\255\255\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\023\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\003\001\004\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\003\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\003\001\004\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\004\001\255\255\255\255\255\255\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\001\001\
\255\255\003\001\019\001\005\001\021\001\007\001\008\001\001\001\
\255\255\003\001\255\255\005\001\255\255\007\001\008\001\255\255\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  ASSIGN\000\
  MULT\000\
  DIV\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  FOR\000\
  IN\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  RETURN\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  VOID\000\
  CHAR\000\
  RECORD\000\
  TRUE\000\
  FALSE\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  CHARLIT\000\
  STRLIT\000\
  BOOLLIT\000\
  FLOATLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_level_list) in
    Obj.repr(
# 42 "parser.mly"
                     ( _1 )
# 496 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
  ( [] )
# 502 "parser.ml"
               : 'top_level_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_level) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_level_list) in
    Obj.repr(
# 46 "parser.mly"
                             ( _1::_2 )
# 510 "parser.ml"
               : 'top_level_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
         ( Stmt _1 )
# 517 "parser.ml"
               : 'top_level))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 50 "parser.mly"
          ( Fdecl _1 )
# 524 "parser.ml"
               : 'top_level))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
            ( Int  )
# 530 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
            ( Bool )
# 536 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
            ( Float )
# 542 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
            ( Char )
# 548 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
            ( String )
# 554 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 58 "parser.mly"
                      ( ListT(_2) )
# 561 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
            ( Void )
# 567 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
              ( RecordType(_2) )
# 574 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typs_list) in
    Obj.repr(
# 61 "parser.mly"
                                ( FunkType(_3, _1) )
# 582 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                                ( [] )
# 588 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 74 "parser.mly"
                      ( _1::_2 )
# 596 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'opts_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 77 "parser.mly"
                                                           ( { rtyp=_1; fname=_2; formals=_4; body=_7 } )
# 606 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                                     ( Expr _1         )
# 613 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 81 "parser.mly"
                                                     ( Vdecl _1 )
# 620 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 82 "parser.mly"
                                                     ( Block _2        )
# 627 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                                           ( If (_3, _5, _7) )
# 636 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                                   ( If (_3, _5, Block([])) )
# 644 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                      ( For (_3, _5, _7) )
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                                                ( While (_3,_5)   )
# 661 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opts_list) in
    Obj.repr(
# 87 "parser.mly"
                                           ( RecordDef(_2, _4) )
# 669 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                ( Return Noexpr )
# 675 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                     ( Return _2 )
# 682 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                  ( Continue )
# 688 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                  ( Break )
# 694 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                    ( [] )
# 700 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 95 "parser.mly"
           ( _1 )
# 707 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
       ( [_1] )
# 714 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 99 "parser.mly"
                    ( _1::_3 )
# 722 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 103 "parser.mly"
                                ( BoolLit _1  )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 104 "parser.mly"
                                 ( IntLit _1   )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 105 "parser.mly"
                                 ( FloatLit _1 )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 106 "parser.mly"
                                 ( CharLit _1  )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                                 ( StrLit _1   )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                     ( BoolLit(true)  )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                     ( BoolLit(false) )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                                 ( Id _1         )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                        ( Binop (_1, Add, _3)   )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                        ( Binop (_1, Sub, _3)   )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                        ( Binop (_1, Div, _3)   )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                        ( Binop (_1, Mul, _3)   )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                         ( Binop (_1, Mod, _3)  )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                        ( Binop (_1, Equal, _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                        ( Binop (_1, Neq, _3)   )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                        ( Binop (_1, Less, _3)  )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                        ( Binop (_1, Leq, _3)  )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                        ( Binop (_1, Greater, _3)  )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                        ( Binop (_1, Geq, _3)  )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                        ( Binop (_1, And, _3)   )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                        ( Binop (_1, Or, _3)    )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                    ( Unop (Not, _2)    )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                             ( Assign (_1, _3)       )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                             ( _2                    )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 131 "parser.mly"
                            ( ListLit(_2)  )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                            ( ListAccess(_1, _3) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
                ( RecordAccess(_1, _3) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 135 "parser.mly"
                                  ( RecordCreate(_1, _3) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                            ( MutateRecord((_1,_3), _5) )
# 942 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                        ( MutateList((_1,_3), _6) )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 140 "parser.mly"
                                  ( Call(_1, _3) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 141 "parser.mly"
                                           ( CallRecord((_1,_3), _5) )
# 968 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_list) in
    Obj.repr(
# 142 "parser.mly"
                                                       ( CallList((_1,_3), _6) )
# 977 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 145 "parser.mly"
           ( Declare(_1, _2) )
# 985 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                       ( Initialize(_1, _2, _4))
# 994 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 150 "parser.mly"
            ( [Opt(_1,_2)] )
# 1002 "parser.ml"
               : 'opts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'opts) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
                        ( Opt(_3,_4) :: _1 )
# 1011 "parser.ml"
               : 'opts))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                  ( [] )
# 1017 "parser.ml"
               : 'opts_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opts) in
    Obj.repr(
# 155 "parser.mly"
         ( List.rev _1 )
# 1024 "parser.ml"
               : 'opts_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 159 "parser.mly"
        ( [_1] )
# 1031 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 160 "parser.mly"
                     ( _3 :: _1 )
# 1039 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
                  ( [] )
# 1045 "parser.ml"
               : 'typs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 164 "parser.mly"
         ( List.rev _1 )
# 1052 "parser.ml"
               : 'typs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "parser.mly"
                  ( [] )
# 1058 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_args) in
    Obj.repr(
# 169 "parser.mly"
                   ( _1 )
# 1065 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 172 "parser.mly"
         ( [_1] )
# 1072 "parser.ml"
               : 'actuals_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actual) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_args) in
    Obj.repr(
# 173 "parser.mly"
                              ( _1::_3 )
# 1080 "parser.ml"
               : 'actuals_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
         ( _1 )
# 1087 "parser.ml"
               : 'actual))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
